
import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Upload, Trash2, RotateCcw } from 'lucide-react';
import { toast } from 'sonner';

interface MapBackgroundManagerProps {
  currentBackground?: string;
  onBackgroundChange: (backgroundUrl: string | null) => void;
}

const MapBackgroundManager: React.FC<MapBackgroundManagerProps> = ({
  currentBackground,
  onBackgroundChange
}) => {
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
    if (file.size > 10 * 1024 * 1024) {
      toast.error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB');
      return;
    }

    setIsUploading(true);

    try {
      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      const imageUrl = URL.createObjectURL(file);
      
      // –°–æ–∑–¥–∞–µ–º Image –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
      const img = new Image();
      img.onload = () => {
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${img.width}x${img.height}px`);
        onBackgroundChange(imageUrl);
        toast.success('–§–æ–Ω –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        setIsUploading(false);
      };
      
      img.onerror = () => {
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        setIsUploading(false);
      };
      
      img.src = imageUrl;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
      setIsUploading(false);
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleUploadClick = () => {
    fileInputRef.current?.click();
  };

  const handleResetBackground = () => {
    onBackgroundChange(null);
    toast.success('–§–æ–Ω –∫–∞—Ä—Ç—ã —Å–±—Ä–æ—à–µ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É');
  };

  const handleRemoveBackground = () => {
    if (currentBackground) {
      URL.revokeObjectURL(currentBackground);
    }
    onBackgroundChange(null);
    toast.success('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–æ–Ω —É–¥–∞–ª–µ–Ω');
  };

  return (
    <Card className="bg-gta-dark gta-border">
      <CardHeader className="pb-3">
        <CardTitle className="text-gta-blue text-sm flex items-center gap-2">
          üó∫Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–º –∫–∞—Ä—Ç—ã
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-3">
        <div className="text-xs text-gray-400">
          –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 1680x2400px –¥–ª—è 7x10 —Ç–∞–π–ª–æ–≤)
        </div>
        
        <div className="flex gap-2">
          <Button
            onClick={handleUploadClick}
            disabled={isUploading}
            size="sm"
            className="flex-1 bg-gta-blue hover:bg-blue-600 text-white"
          >
            <Upload size={14} className="mr-1" />
            {isUploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É'}
          </Button>
          
          {currentBackground && (
            <Button
              onClick={handleRemoveBackground}
              size="sm"
              variant="outline"
              className="border-red-500 text-red-400 hover:bg-red-500 hover:text-white"
            >
              <Trash2 size={14} />
            </Button>
          )}
        </div>

        <Button
          onClick={handleResetBackground}
          size="sm"
          variant="outline"
          className="w-full border-gray-600 text-gray-300 hover:bg-gray-700"
        >
          <RotateCcw size={14} className="mr-1" />
          –°–±—Ä–æ—Å–∏—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É
        </Button>

        {currentBackground && (
          <div className="text-xs text-green-400 bg-green-900/20 p-2 rounded border border-green-700">
            ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–æ–Ω –∫–∞—Ä—Ç—ã
          </div>
        )}

        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          onChange={handleFileSelect}
          className="hidden"
        />
      </CardContent>
    </Card>
  );
};

export default MapBackgroundManager;
